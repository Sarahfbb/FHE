#Install a new python version
#System Terminal Commands
cd /tmp
wget https://www.python.org/ftp/python/3.10.0/Python-3.10.0.tgz
tar -xf Python-3.10.0.tgz
cd Python-3.10.0
sudo apt update
sudo apt install -y build-essential libssl-dev zlib1g-dev libncurses5-dev libncursesw5-dev libreadline-dev libsqlite3-dev libgdbm-dev libdb5.3-dev libbz2-dev libexpat1-dev liblzma-dev tk-dev libffi-dev

./configure --enable-optimizations
make -j 8
sudo make altinstall

#Create and Activate Virtual Environment
python3.10 -m venv ~/.virtualenvs/concrete_env
source ~/.virtualenvs/concrete_env/bin/activate
python --version  # Should output Python 3.10.x

#Vscode Terminal
Option 1:
python3.10 -m venv ~/.virtualenvs/concrete_env
source ~/.virtualenvs/concrete_env/bin/activate
python --version  # Should output Python 3.10.x

Option 2:
If there's 3.10 python version already:
#install the required package
sudo apt install python3.10-venv
#After the installation is complete, try creating the virtual environment again:
python3 -m venv xxx
#If successful, activate the new virtual environment:
source xxx/bin/activate
# Open the terminal (not remote server)and run the command,where home/minghui/FHE/Extracted_Features is the path(Run the files of remote to local)
scp -r minghui@172.21.46.141:/home/minghui/FHE/Extracted_Features/* ./Documents/

#scp fail
1.check the name of directory
ls -l /home/minghui/FHE/
2.Find the directori you found,maybe there's tab in the name of directory like this"best _ensembles"
3.Modify it
Eg:  mv "M _models" M_models
4.scp again
scp -r minghui@172.21.46.141:/home/minghui/FHE/Extracted_Features/* ./Documents/




#synchronize the respository from desktop to laptop.(manually0
rsync -avz /home/minghui/FHE/ minghui@172.21.46.141:/home/minghui/FHE-1
 #(Automatically)
nano ~/sync_fhe.sh
rsync -avz /home/minghui/FHE/ minghui@172.21.46.141:/home/minghui/FHE-1 #Press CTRL + X, then Y, then Enter to save and exit.
crontab -e
0 * * * * /home/minghui/sync_fhe.sh  #Press CTRL + X, then Y, then Enter to save and exit.
crontab -l

#Update the Nvidia driver
Install driver:
1. sudo apt-get purge nvidia* (remove current driver)
- sudo apt-get remove --purge '^libnvidia-.*'
- sudo apt-get remove --purge '^cuda-.*'
- sudo apt-get install linux-headers-$(uname -r)
- sudo apt-get remove ubuntu-drivers-common

2. sudo apt-get install ubuntu-drivers-common
3. sudo ubuntu-drivers autoinstall
4. sudo reboot
5. nvidia-smi

#Verify NVIDIA Driver and CUDA Installation
nvidia-smi
nvcc --version

# Solving the Cuda compilation tools issue
1.Remove any existing CUDA installations:
sudo apt-get purge cuda*
sudo apt-get autoremove

2.Download and install CUDA 11.4:
From this website "https://developer.nvidia.com/cuda-11-4-1-download-archive?target_os=Linux&target_arch=x86_64&Distribution=Ubuntu&target_version=18.04&target_type=deb_local"
to download the appropriate installer for your operating system.If you don't know ,you can run 'uname -a'  and  'lsb_release -a'


3.Add CUDA to your PATH and LD_LIBRARY_PATH:
echo 'export PATH=/usr/local/cuda-11.4/bin${PATH:+:${PATH}}' >> ~/.bashrc
echo 'export LD_LIBRARY_PATH=/usr/local/cuda-11.4/lib64${LD_LIBRARY_PATH:+:${LD_LIBRARY_PATH}}' >> ~/.bashrc
source ~/.bashrc

#Install the appropriate  torch
pip3 install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cu113


#Using conda on server rather than pip
1.Downloading conda
https://www.anaconda.com/download/success

2.scp to the server
scp Anaconda3-2024.06-1-Linux-x86_64.sh minghui@172.21.46.131:./

3 Create a new virtual environment
conda create -n pytorch python=3.10
conda activate pytorch

3.Downloading the cuda 
Find on this website:https://pytorch.org/
Eg: conda install pytorch torchvision torchaudio pytorch-cuda=11.8 -c pytorch -c nvidia


#pushing from vscode to Github
1.Under the ssh,list all of directory under this ssh and then push to this directory
ls
cd SCA_with_Ensemble_learning/

2.List all of files and directories on the "SCA_with_Ensemble_learning"
Eg:We wanna push the "Good.py"

3.Some command lines
git add Good.py
git commit -m "Good.py"
git config --global user.email "zmhsarah@gmail.com" - Sets the global Git email
git config --global user.name "minghui" - Sets the global Git username
git push - Pushes committed changes to the remote repository (GitHub in this case)
git pull - Pulls changes from the remote repository
git config --global push.default matching - Sets the push behavior to 'matching'










